{"version":3,"file":"static/js/158.8bc9aad7.chunk.js","mappings":"kQACA,GAAgB,UAAY,4BAA4B,WAAa,6BAA6B,kBAAoB,oCAAoC,uBAAyB,yCAAyC,iBAAmB,oC,SCGhO,SAASA,EAAT,GAAmC,IAAhBC,EAAe,EAAfA,YAChC,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAWE,OACE,gBAAKC,UAAWC,EAAAA,UAAhB,UACE,kBAAMD,UAAWC,EAAAA,WAAgBC,SAPlB,SAACC,GACpBA,EAAEC,iBACFR,EAAYE,EACX,EAIG,WACI,mBAAQO,KAAK,SAASL,UAAWC,EAAAA,kBAAjC,UACA,iBAAMD,UAAWC,EAAAA,uBAAjB,uBAGF,kBACED,UAAWC,EAAAA,iBACXI,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,SAtBW,SAAC,GAA2B,IAAfX,EAAc,EAAxBY,OAAUZ,MAChCC,EAAUD,EACZ,EAqBUA,MAAOA,QAKlB,CC5BD,IAwDA,EAxDe,WACd,OAAmCD,EAAAA,EAAAA,UAAS,IAA5C,eAAOc,EAAP,KAAmBC,EAAnB,KACA,GAAoCf,EAAAA,EAAAA,UAAS,IAA7C,eAAOgB,EAAP,KAAmBC,EAAnB,KACMC,GAAWC,EAAAA,EAAAA,MAkCf,OA3BAC,EAAAA,EAAAA,YAAU,WACNN,IAGLO,EAAAA,EAAAA,IAAgBP,GACdQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAAG,GACLC,QAAQC,IAAIF,GACgB,IAAxBA,EAAKG,QAAQC,QAChBH,QAAQC,IAAI,wBACZG,IAAAA,OAAAA,QAAwB,yBAGxBA,IAAAA,OAAAA,QAAwB,mBAEzBb,EAAcQ,EAAKG,QACnB,IACAG,OAAM,SAAAC,GACNF,IAAAA,OAAAA,QAAA,UAA2BE,IAC3BN,QAAQC,IAAIK,EACZ,IACAC,SAAQ,WACRP,QAAQC,IAAI,kBACZ,GACF,GAAE,CAACb,KAIJ,4BACC,SAAChB,EAAD,CAAQC,YAlCa,SAACe,GACtBC,EAAaD,GACbY,QAAQC,IAAI,uBACZ,IAgCwB,IAAtBX,EAAWa,QAA+B,KAAff,IAAqB,SAACoB,EAAA,QAAD,IAChDlB,EAAWa,OAAS,IACpB,wBACQb,EAAWmB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACb,SAAC,KAAD,CAAeC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMtB,GAAnD,UACE,wBACImB,KAFKD,EADE,QAW1B,C,0CCrDD,UARiB,WACf,OACE,0BACI,mDAGP,C,uJCND,IAAMK,EAAW,gCACXC,EAAU,mCAEHC,EAAkB,WAC3B,OAAOC,MAAM,GAAD,OACLH,EADK,sCACiCC,GAEhD,EAEYrB,EAAkB,SAACP,GAC5B,OAAO8B,MAAM,GAAD,OACLH,EADK,gCAC2BC,EAD3B,kBAC4C5B,GAE3D,EAEY+B,EAAsB,SAACT,GAChC,OAAOQ,MAAM,GAAD,OACLH,EADK,iBACYL,EADZ,oBAC0BM,GAEzC,EAEYI,EAA2B,SAACV,GACrC,OAAOQ,MAAM,GAAD,OACLH,EADK,iBACYL,EADZ,4BACkCM,GAEjD,EAEYK,EAA2B,SAACX,GACrC,OAAOQ,MAAM,GAAD,OACLH,EADK,iBACYL,EADZ,4BACkCM,GAEjD,C","sources":["webpack://react-homework-template/./src/components/Serchbar/Serchbar.module.css?ca80","components/Serchbar/Serchbar.jsx","Pages/Movies/Movies.jsx","Pages/NotFound/NotFound.jsx","services/services.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Serchbar_searchbar__RlohG\",\"SearchForm\":\"Serchbar_SearchForm__sf+OI\",\"SearchForm_button\":\"Serchbar_SearchForm_button__bNj3t\",\"SearchForm_button_text\":\"Serchbar_SearchForm_button_text__0w6hA\",\"SearchForm_input\":\"Serchbar_SearchForm_input__Na9Dp\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react'\nimport css from './Serchbar.module.css'\n\nexport default function Search ({ handleSerch }) {\n  const [value, setValue] = useState('');\n  \n  const handleChange = ({ target: { value } }) => {\n    setValue( value )\n\t}\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    handleSerch(value)\n    }\n \n    return (\n      <div className={css.Searchbar}>\n        <form className={css.SearchForm} onSubmit={handleSubmit}>\n            <button type=\"submit\" className={css.SearchForm_button}>\n            <span className={css.SearchForm_button_text}>Search</span>\n          </button>\n\n          <input\n            className={css.SearchForm_input}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search films\"\n            onChange={handleChange}\n            value={value}\n          />\n        </form>\n      </div>\n    )\n}\n\nSearch.propTypes = {\n  handleSerch: PropTypes.func,\n}","import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport NotFound from '../NotFound/NotFound'\nimport { getSerchingFilm } from '../../services/services'\nimport Search from '../../components/Serchbar/Serchbar';\n\nconst Movies = () => {\n\tconst [searchText, setSerchText] = useState('');\n\tconst [filmsArray, setFilmsArray] = useState([]);\n\tconst location = useLocation();\n\n  \tconst handleSerch = (searchText) => {\n\t\tsetSerchText(searchText);\n\t\tconsole.log('Looking for an films');\n\t}\n\n  \tuseEffect(() => {\n\t\tif (!searchText) {\n\t\t\treturn\n\t\t}\n\t\tgetSerchingFilm(searchText)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tconsole.log(data)\n\t\t\t\tif (data.results.length === 0) {\n\t\t\t\t\tconsole.log('Sorry, nothing found')\n\t\t\t\t\tNotiflix.Notify.warning('Sorry, nothing found')\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tNotiflix.Notify.success('Found something')\n\t\t\t\t}\n\t\t\t\tsetFilmsArray(data.results);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tNotiflix.Notify.failure(`${error}`)\n\t\t\t\tconsole.log(error)\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tconsole.log('Search complete')\n\t\t\t})\n\t}, [searchText])\n\n\n  \treturn (\n\t<div>\n\t\t<Search handleSerch={handleSerch} />\n\t\t\t{filmsArray.length === 0 && searchText !== '' && <NotFound />}\t\t\n\t\t\t{filmsArray.length > 0 &&\n\t\t\t\t<ul>\n        \t\t\t{filmsArray.map(({ id, title }) => (\n          \t\t\t\t<Link key={id} to={`/movies/${id}`} state={{ from: location }}>\n            \t\t\t\t<li>  \n              \t\t\t\t\t{title}\n            \t\t\t\t</li>  \n          \t\t\t\t</Link>\n        \t\t\t))}\n        \t\t</ul>\n\t\t\t}\t\t\n    </div>\n  \t);\n};\n\nexport default Movies;","const NotFound = () => {\n  return (\n    <div>\n        <h1>Sorry, page not found</h1>\n    </div>\n  );\n};\n\nexport default NotFound;","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c17d6d199e4f044ab21fca194914f42f';\n\nexport const getTrendingFilm = () => {\n    return fetch(\n        `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n};\n\nexport const getSerchingFilm = (searchText) => {\n    return fetch(\n        `${BASE_URL}search/movie?api_key=${API_KEY}&query=${searchText}`\n    );\n};\n\nexport const getSerchingFilmById = (id) => {\n    return fetch(\n        `${BASE_URL}movie/${id}?api_key=${API_KEY}`\n    );\n};\n\nexport const getSerchingFilmByCredits = (id) => {\n    return fetch(\n        `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n    );\n};\n\nexport const getSerchingFilmByReviews = (id) => {\n    return fetch(\n        `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n    );\n};"],"names":["Search","handleSerch","useState","value","setValue","className","css","onSubmit","e","preventDefault","type","autoComplete","autoFocus","placeholder","onChange","target","searchText","setSerchText","filmsArray","setFilmsArray","location","useLocation","useEffect","getSerchingFilm","then","response","json","data","console","log","results","length","Notiflix","catch","error","finally","NotFound","map","id","title","to","state","from","BASE_URL","API_KEY","getTrendingFilm","fetch","getSerchingFilmById","getSerchingFilmByCredits","getSerchingFilmByReviews"],"sourceRoot":""}